 public void InsertPatientInfo(patientInfo RequestData, AspNetUser asp, User data, Request req, RequestClient rc)
 {
     //AspNetUser asp = new AspNetUser();
     if(asp.UserName == null)
     {
         asp.UserName = RequestData.FirstName + RequestData.LastName;
         asp.Email = RequestData.Email;
         asp.PhoneNumber = RequestData.Mobile;
         asp.CreatedDate = DateTime.Now;
         _context.AspNetUsers.Add(asp);
         _context.SaveChanges();

     }



     //User data = new User();
     if (req.RequestTypeId == 4)
     {
         var c_regionid = _context.Regions.Where(x => x.Name == RequestData.ConciergeCity).Select(u => u.RegionId).FirstOrDefault();
         data.RegionId = c_regionid;
         rc.RegionId = c_regionid;
     }
     else
     {
         var regionid = _context.Regions.Where(x => x.Name == RequestData.City).Select(u => u.RegionId).FirstOrDefault();
         data.RegionId = regionid;
         rc.RegionId = regionid;
     }
     
     data.FirstName = RequestData.FirstName;
     data.LastName = RequestData.LastName;
     data.Email = RequestData.Email;
     data.Mobile = RequestData.Mobile;
     data.Street = RequestData.Street;
     data.City = RequestData.City;
     data.State = RequestData.State;
     data.ZipCode = RequestData.ZipCode;

     data.CreatedDate = DateTime.Now;

     System.String sDate = RequestData.DateOfBirth.ToString();
     DateTime datevalue = (Convert.ToDateTime(sDate.ToString()));

     int dy = datevalue.Day;
     System.String mn = datevalue.Month.ToString();
     int yy = datevalue.Year;

     data.IntYear = yy;
     data.StrMonth = mn;
     data.IntDate = dy;
     data.Status = 1;
    
     _context.Users.Add(data);
     _context.SaveChanges();


     //Request req = new Request();
     req.UserId = data.UserId;
     req.Status = 1;
     req.CreatedDate = DateTime.Now;
     int c = _context.Users.Where(x => x.CreatedDate.Date == DateTime.Today).Count();
     if(req.RequestTypeId == 4)
     {
         req.ConfirmationNumber = RequestData.ConciergeState.Substring(0, 2) + DateTime.Now.ToString().Replace("-", "").Substring(0, 4) + RequestData.LastName.Substring(0, 2) + RequestData.FirstName.Substring(0, 2) + c;
     }
     else
     {
         req.ConfirmationNumber = RequestData.State.Substring(0, 2) + DateTime.Now.ToString().Replace("-", "").Substring(0, 4) + RequestData.LastName.Substring(0, 2) + RequestData.FirstName.Substring(0, 2) + c;
     }
     
     
     if (RequestData.MultipleFiles != null)
     {
         foreach (var file in RequestData.MultipleFiles)
         {
             string path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/Files");

             //create folder if not exist
             if (!Directory.Exists(path))
                 Directory.CreateDirectory(path);
             string fileNameWithPath = Path.Combine(path, file.FileName);
             using (var stream = new FileStream(fileNameWithPath, FileMode.Create))
             {
                 file.CopyTo(stream);
             }
         }
     }


     _context.Requests.Add(req);
     _context.SaveChanges();
     if (RequestData.MultipleFiles != null)
     {
         foreach (var file in RequestData.MultipleFiles)
         {
             RequestWiseFile rf = new RequestWiseFile();
             rf.RequestId = req.RequestId;
             rf.FileName = file.FileName;
             rf.CreatedDate = DateTime.Now;
             rf.IsDeleted = new BitArray(new bool[] { false });
             _context.RequestWiseFiles.Add(rf);
             _context.SaveChanges();

         }
     }

     //RequestClient rc = new RequestClient();
     rc.RequestId = req.RequestId;
     rc.FirstName = RequestData.FirstName;
     rc.LastName = RequestData.LastName;
     rc.PhoneNumber = RequestData.Mobile;
     rc.Location = RequestData.State;
     rc.Address = RequestData.Street + "," + RequestData.City + "," + RequestData.State + " ," + RequestData.ZipCode;
     rc.Notes = RequestData.Symptoms;
     if (req.RequestTypeId == 4)
     {
         rc.Location = RequestData.ConciergeCity;
     }
     rc.Location = RequestData.City;
     rc.Email = RequestData.Email;
     rc.StrMonth = mn;
     rc.IntDate = dy;
     rc.IntYear = yy;
     rc.Street = RequestData.Street;
     rc.City = RequestData.City;
     rc.State = RequestData.State;
     rc.ZipCode = RequestData.ZipCode;

    
    


     _context.RequestClients.Add(rc);
     _context.SaveChanges();

 }

 public void CreateRequest(patientInfo RequestData)
 { 
     AspNetUser asp = new AspNetUser();
     User data = new User();
     Request req = new Request();
     RequestClient rc = new RequestClient();

     asp.Id = Guid.NewGuid().ToString();
     
     var plainText = Encoding.UTF8.GetBytes(RequestData.PasswordHash);
     var passwordhash = Convert.ToBase64String(plainText);
     asp.PasswordHash = passwordhash;
     data.AspNetUserId = asp.Id;
     data.CreatedBy = RequestData.FirstName;
  
     req.RequestTypeId = 2;
    
     req.FirstName = RequestData.FirstName;
     req.LastName = RequestData.LastName;
     req.PhoneNumber = RequestData.Mobile;
     req.Email = RequestData.Email;
     

     InsertPatientInfo(RequestData, asp, data, req, rc);
 }


 public string CreateFamilyRequest(patientInfo RequestData)
 {
     AspNetUser asp = new AspNetUser();
     User data = new User();
     Request req = new Request();
     RequestClient rc = new RequestClient();
     var newId = "";
     AspNetUser row = _context.AspNetUsers.Where(x => x.Email == RequestData.Email).FirstOrDefault();
     if (row == null)
     {
         newId = Guid.NewGuid().ToString();
         asp.Id = newId;
     }
     else
     {
         asp = row;
         data.AspNetUserId = row.Id;
     }
     data.CreatedBy = RequestData.FamilyFirstName;
     req.RequestTypeId = 3;
   
     req.FirstName = RequestData.FamilyFirstName;
     req.LastName = RequestData.FamilyLastName;
     req.PhoneNumber = RequestData.FamilyPhoneNumber;
     req.Email = RequestData.FamilyEmail;



     req.RelationName = RequestData.RelationName;
   
     
         InsertPatientInfo(RequestData, asp, data, req, rc);
    
         
     
    
        
     
     
     return newId;
 }

 public string CreateConciergeRequest(patientInfo RequestData)
 {
     AspNetUser asp = new AspNetUser();
     User data = new User();
     Request req = new Request();
     RequestClient rc = new RequestClient();
     var newId = "";
     AspNetUser row = _context.AspNetUsers.Where(x => x.Email == RequestData.Email).FirstOrDefault();
     if (row == null)
     {
         newId = Guid.NewGuid().ToString();
         asp.Id = newId;
     }
     else
     {
         asp = row;
         data.AspNetUserId = row.Id;
     }
     data.CreatedBy = RequestData.ConciergeFirstName;

     req.RequestTypeId = 4;
   
     req.FirstName = RequestData.ConciergeFirstName;
     req.LastName = RequestData.ConciergeLastName;
     req.PhoneNumber = RequestData.ConciergePhoneNumber;
     req.Email = RequestData.ConciergeEmail;
  
         InsertPatientInfo(RequestData, asp, data, req, rc);
     
    

     Concierge concierge = new Concierge();
     RequestConcierge requestConcierge = new RequestConcierge();
     concierge.ConciergeName = RequestData.ConciergeFirstName + "  " + RequestData.ConciergeLastName;
     concierge.Address = RequestData.ConciergeStreet + " " + RequestData.ConciergeCity + " " + RequestData.ConciergeState + " " + RequestData.ConciergeZipCode;
     concierge.Street = RequestData.ConciergeStreet;
     concierge.City = RequestData.ConciergeCity;
     concierge.State = RequestData.ConciergeState;
     concierge.ZipCode = RequestData.ConciergeZipCode;
     concierge.CreatedDate = DateTime.Now;
    concierge.Propertyname = RequestData.ConciergePropertyName;
     var regionid = _context.Regions.Where(x => x.Name == RequestData.ConciergeCity).Select(u => u.RegionId).FirstOrDefault();

     concierge.RegionId = regionid;
     //concierge.Propertyname = RequestData.ConciergePropertyName;
     _context.Concierges.Add(concierge);

     _context.SaveChanges();



     requestConcierge.RequestId = req.RequestId;
     requestConcierge.ConciergeId = concierge.ConciergeId;

     _context.RequestConcierges.Add(requestConcierge);
     _context.SaveChanges();
     return newId;
 }

 public string CreateBusinessRequest(patientInfo RequestData)
 {
     AspNetUser asp = new AspNetUser();
     User data = new User();
     Request req = new Request();
     RequestClient rc = new RequestClient();
     var newId = "";
     AspNetUser row = _context.AspNetUsers.Where(x => x.Email == RequestData.Email).FirstOrDefault();
     if (row == null)
     {
         newId = Guid.NewGuid().ToString();
         asp.Id = newId;
     }
     else
     {
         asp = row;
         data.AspNetUserId = row.Id;
     }
     data.CreatedBy = RequestData.BusinessFirstName;
    
     req.RequestTypeId = 1;

     req.FirstName = RequestData.BusinessFirstName;
     req.LastName = RequestData.BusinessLastName;
     req.PhoneNumber = RequestData.BusinessPhoneNumber;
     req.Email = RequestData.BusinessEmail;

         InsertPatientInfo(RequestData, asp, data, req, rc);

     return newId;
 }









patientInfo:

using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HalloDoc.DataAccessLayer.DataModels.ViewModels
{
    public class patientInfo
    {
        [StringLength(250)]
        public string Symptoms { get; set; } = null!;
        [Required]
        public DateOnly DateOfBirth { get; set; }
        [Required]
        [StringLength(100)]
        public string FirstName { get; set; } = null!;
        [Required]
        [StringLength(100)]
        public string? LastName { get; set; }

        [Column(TypeName = "character varying")]
        [Required]
        public string? PasswordHash { get; set; }
        [Required]
        [StringLength(50)]
        public string Email { get; set; } = null!;

        [StringLength(20)]
        public string? Mobile { get; set; }

        [StringLength(23)]
        public string? PhoneNumber { get; set; } = null;
        [Required]
        [StringLength(100)]
        public string? Street { get; set; }
        [Required]
        [StringLength(100)]
        public string? City { get; set; }
        [Required]
        [StringLength(100)]
        public string? State { get; set; }
        [Required]
        [StringLength(10)]
        public string? ZipCode { get; set; }

        public int RequestTypeId { get; set; }
        public IFormFile[]? MultipleFiles { get; set; }


        [Required]
        [StringLength(100)]
        public string? FamilyFirstName { get; set; }
        [Required]
        [StringLength(100)]
        public string? FamilyLastName { get; set; }

        [StringLength(23)]
        public string? FamilyPhoneNumber { get; set; } = null;
        [Required]
        [StringLength(50)]
        public string? FamilyEmail { get; set; }
        [Required]
        [StringLength(100)]
        public string? RelationName { get; set; }

        [StringLength(500)]
        public string? Notes { get; set; }



        [Required]
        [StringLength(100)]
        public string? ConciergeFirstName { get; set; }
        [Required]
        [StringLength(100)]
        public string? ConciergeLastName { get; set; }

        [StringLength(23)]
        public string? ConciergePhoneNumber { get; set; } = null;
        [Required]
        [StringLength(50)]
        public string? ConciergeEmail { get; set; }
        [Required]
        [StringLength(100)]
        public string? ConciergePropertyName { get; set; }
        [Required]
        [StringLength(100)]
        public string? ConciergeStreet { get; set; }
        [Required]
        [StringLength(100)]
        public string? ConciergeCity { get; set; }
        [Required]
        [StringLength(100)]
        public string? ConciergeState { get; set; }
        [Required]
        [StringLength(10)]
        public string? ConciergeZipCode { get; set; }


        [Required]
        [StringLength(100)]
        public string? BusinessFirstName { get; set; }
        [Required]
        [StringLength(100)]
        public string? BusinessLastName { get; set; }

        [StringLength(23)]
        public string? BusinessPhoneNumber { get; set; } = null;
        [Required]
        [StringLength(50)]
        public string? BusinessEmail { get; set; }
        [Required]
        [StringLength(100)]
        public string? BusinessPropertyName { get; set; }

    }
}
